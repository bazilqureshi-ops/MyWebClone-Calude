@using Emse.QMagic.Web.Domain.Viewmodels
@model ReportViewModel

<link href="~/assets/css/report.css" rel="stylesheet" />
<link href="~/assets/css/Chart.min.css" rel="stylesheet" />

<script src="~/assets/js/Chart.min.js"></script>
<script src="~/Scripts/report.js"></script>
<script src="~/Scripts/chartjs-label-plugin.min.js"></script>

<div class="row">
	<div class="col-xs-12 col-xs-offset-0">
		<div class="card">
			<div class="card-header">
				<div class="bussines-info-box left">
					<p>Detailed Ticket Based Report</p>
					<p>@Model.CorporateNumber</p>
					<p>
						@{
							string branchList = "";
							for (int i = 0; i < Model.UserBranches.Count; i++)
							{
								if (i == Model.UserBranches.Count - 1) { branchList += $"{Model.UserBranches[i].Name}"; }
								else { branchList += $"{Model.UserBranches[i].Name}, "; }
							}

						}
						@branchList
					</p>
					<p>@Model.StartDate.ToLongDateString() - @Model.FinishDate.ToLongDateString()</p>
				</div>

				<div class="bussines-info-box right">
					<p>@Model.UserName</p>
					<p>@Model.UserRole</p>
					<p>@DateTime.Now.ToLongDateString() / @DateTime.Now.ToLongTimeString()</p>
				</div>
			</div>

			<div class="card-body">

				<form action="/Reports/ExportExcel" method="post" class="row" style="padding-left:10px; padding-right:10px;">

					@for (int i = 0; i < Model.UserBranches.Count(); i++)
					{
						@Html.HiddenFor(x => Model.UserBranches[i].Name)
						@Html.HiddenFor(x => Model.UserBranches[i].Id)
						@Html.HiddenFor(x => Model.UserBranches[i].Checked)
					}

					<!-- Button Container -->
					<div class="row" id="button-area">
						<button type="button" onClick="callPrint(document);" id="printpage" class="btn btn-danger"><i class="fa fa-print"></i> Print Page </button>
						<span>&nbsp;</span>

						<button type="submit" class="btn btn-danger"><i class="fa fa-file-excel-o"></i>  Export to Excel</button>

						<button type="button" id="sign-report" class="btn btn-success" data-toggle="modal" data-target="#sign-report-modal"><i class="fa fa-pencil"></i> Sign Report </button>
					</div>

					<!-- Charts -->
					<div class="chart-container" style="margin-bottom: 2%;">
						<div class="row" id="pie-charts">

							<!-- Branch Pie Chart -->
							<div class="chart">
								<canvas id="branch-chart"></canvas>
							</div>

							<!-- Service Pie Chart -->
							<div class="chart">
								<canvas id="service-chart"></canvas>
							</div>

							<!-- Segment Pie Chart -->
							<div class="chart">
								<canvas id="segment-chart"></canvas>
							</div>
						</div>

						<!-- Line Chart -->
						<div id="half-pie-charts" class="row" style="height:520px;">

							<!-- Example -->
							<div class="chart" style="margin-left:25%; width:50% !important; height:450px !important;">
								<canvas id="service-result"></canvas>
							</div>

						</div>
					</div>

					<!-- Service's Tickets -->
					<div id="line-tickets">
						<table id="line-tickets-per-hour">
							<thead>
								<tr>
									<th>Service Name</th>
									<th>00:00</th>
									<th>01:00</th>
									<th>02:00</th>
									<th>03:00</th>
									<th>04:00</th>
									<th>05:00</th>
									<th>06:00</th>
									<th>07:00</th>
									<th>08:00</th>
									<th>09:00</th>
									<th>10:00</th>
									<th>11:00</th>
									<th>12:00</th>
									<th>13:00</th>
									<th>14:00</th>
									<th>15:00</th>
									<th>16:00</th>
									<th>17:00</th>
									<th>18:00</th>
									<th>19:00</th>
									<th>20:00</th>
									<th>21:00</th>
									<th>22:00</th>
									<th>23:00</th>
								</tr>
							</thead>
							<tbody>
							</tbody>
						</table>
					</div>

					<!-- Item Per Page & Search Input -->
					<select id="item-per-page">
						<option value="10">10</option>
						<option value="25">25</option>
						<option value="50">50</option>
						<option value="100">100</option>
					</select>
					<input type="text" id="search-magic-table" name="search-magic-table" placeholder="type something to search" autocomplete="off" />

					<!-- Item Table -->
					<table id="magic-table" border="1" class="magic-table col-xs-12 col-md-12 col-lg-12" cellspacing="0" width="100%">

						<thead>
							<tr>
								<th>Ticket Number</th>
								<th>Branch Name</th>
								<th>Service Name</th>
								<th>Segment Name</th>
								<th>Terminal Number</th>
								<th>Teller Name</th>
								<th>Visit Date</th>
								<th>Print Time</th>
								<th>Call Time</th>
								<th>End Time</th>
								<th>Waiting Time</th>
								<th>Operation Time</th>
								<th>Procces Time</th>
							</tr>
						</thead>

						@{
							var data = new List<Array>();
						}
						<tbody>

							<!-- Default Input For Export -->
							<input type="hidden" name="Data[0]" value="Ticket Number" />
							<input type="hidden" name="Data[0]" value="Branch Name" />
							<input type="hidden" name="Data[0]" value="Service Name" />
							<input type="hidden" name="Data[0]" value="Segment Name" />
							<input type="hidden" name="Data[0]" value="Terminal Number" />
							<input type="hidden" name="Data[0]" value="Called Username" />
							<input type="hidden" name="Data[0]" value="Visit Date" />
							<input type="hidden" name="Data[0]" value="Print Time" />
							<input type="hidden" name="Data[0]" value="Call Time" />
							<input type="hidden" name="Data[0]" value="End Time" />
							<input type="hidden" name="Data[0]" value="Waiting Time" />
							<input type="hidden" name="Data[0]" value="Average Operation Time" />
							<input type="hidden" name="Data[0]" value="Average Process Time" />

							@{
								for (int i = 0; i < Model.ReportProperties.Count; i++)
								{

									<tr style="display:none;">
										<td text="@Model.ReportProperties[i].TicketNumber">@Model.ReportProperties[i].TicketNumber</td>
										<td text="@Model.ReportProperties[i].BranchName">@Model.ReportProperties[i].BranchName</td>
										<td text="@Model.ReportProperties[i].ServiceName">@Model.ReportProperties[i].ServiceName</td>
										<td text="@Model.ReportProperties[i].SegmentName">@Model.ReportProperties[i].SegmentName</td>
										<td text="@Model.ReportProperties[i].TerminalNumber">@Model.ReportProperties[i].TerminalNumber</td>
										<td text="@Model.ReportProperties[i].CalledUserName">@Model.ReportProperties[i].CalledUserName</td>
										<td text="@Model.ReportProperties[i].VisitDate">@Model.ReportProperties[i].VisitDate</td>
										<td text="@Model.ReportProperties[i].PrintTime">@Model.ReportProperties[i].PrintTime</td>
										<td text="@Model.ReportProperties[i].CallTime">@Model.ReportProperties[i].CallTime</td>
										<td text="@Model.ReportProperties[i].EndTime">@Model.ReportProperties[i].EndTime</td>
										<td text="@Model.ReportProperties[i].WaitingTime">@Model.ReportProperties[i].WaitingTime</td>
										<td text="@Model.ReportProperties[i].AverageOperationTime">@Model.ReportProperties[i].AverageOperationTime</td>
										<td text="@Model.ReportProperties[i].AverageProcessTime">@Model.ReportProperties[i].AverageProcessTime</td>

										<input type="hidden" name="Data[@(i + 1)]" value="@Model.ReportProperties[i].TicketNumber" />
										<input type="hidden" name="Data[@(i + 1)]" value="@Model.ReportProperties[i].BranchName" />
										<input type="hidden" name="Data[@(i + 1)]" value="@Model.ReportProperties[i].ServiceName" />
										<input type="hidden" name="Data[@(i + 1)]" value="@Model.ReportProperties[i].SegmentName" />
										<input type="hidden" name="Data[@(i + 1)]" value="@Model.ReportProperties[i].TerminalNumber" />
										<input type="hidden" name="Data[@(i + 1)]" value="@Model.ReportProperties[i].CalledUserName" />
										<input type="hidden" name="Data[@(i + 1)]" value="@Model.ReportProperties[i].VisitDate" />
										<input type="hidden" name="Data[@(i + 1)]" value="@Model.ReportProperties[i].PrintTime" />
										<input type="hidden" name="Data[@(i + 1)]" value="@Model.ReportProperties[i].CallTime" />
										<input type="hidden" name="Data[@(i + 1)]" value="@Model.ReportProperties[i].EndTime" />
										<input type="hidden" name="Data[@(i + 1)]" value="@Model.ReportProperties[i].WaitingTime" />
										<input type="hidden" name="Data[@(i + 1)]" value="@Model.ReportProperties[i].AverageOperationTime" />
										<input type="hidden" name="Data[@(i + 1)]" value="@Model.ReportProperties[i].AverageProcessTime" />

									</tr>

								}
							}
						</tbody>

					</table>

					<!-- Page Count and Result Count Info's -->
					<div class="row">
						<div id="page-info-box">
							Total Result: <span id="result-count">{ticket}</span>
							/
							Pages: <span id="page-count">{pages}</span>
						</div>

						<div id="button-container"></div>
					</div>

					<!-- Sign Report Modal -->
					<div class="modal" tabindex="-1" role="dialog" id="sign-report-modal">
						<div class="modal-dialog" role="document">
							<div class="modal-content">
								<div class="modal-header">
									<h3 class="modal-title">Add Signer</h3>

									<button type="button" class="close" data-dismiss="modal" aria-label="Close">
										<span aria-hidden="true">&times;</span>
									</button>
								</div>
								<div class="modal-body">
									<div class="row">
										<input type="text" name="signer-name" class="form-control col-xs-6 col-md-6" placeholder="Replace this text with name" value="" />
										<input type="text" name="signer-surname" class="form-control col-xs-6 col-md-6" placeholder="Replace this text with surname" value="" />
										<input type="text" name="signer-job-title" class="form-control col-xs-6 col-md-12" placeholder="Replace this text with job title (optional)" value="" />

										<button type="button" class="btn btn-primary" onclick="addSigner()">Add Signer</button>
									</div>

									<hr />

									<ul id="signer-list">
									</ul>
								</div>

								<div class="modal-footer">
									<button type="button" class="btn btn-primary" onclick="saveSigners()">Save changes</button>
									<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
								</div>
							</div>
						</div>
					</div>

				</form>

			</div>
		</div>
	</div>
</div>

<script>

	//Get Canvases
	let branchPieChart = document.getElementById('branch-chart'),
		servicePieChart = document.getElementById('service-chart'),
		segmentPieChart = document.getElementById('segment-chart'),
		serviceResultChart = document.getElementById('service-result');

	let trs = $('.magic-table > tbody > tr'),
		activeChartes = false;

	let globalServiceTickets = '';

	function exportExcel() {
		$('#export-excel').submit();
	}

	//Fill required datas into arrays
	trs.map((index, value) => {
		if (!branchChartLabel.includes($(value).children('td').eq(1).text())) {
			branchChartLabel.push($(value).children('td').eq(1).text());
			branchChartData.push($('td[text="' + $(value).children('td').eq(1).text() + '"]').length);
			branchColours.push(rgba());
		}

		if (!serviceChartLabel.includes($(value).children('td').eq(2).text())) {
			serviceChartLabel.push($(value).children('td').eq(2).text());
			serviceChartData.push($('td[text="' + $(value).children('td').eq(2).text() + '"]').length);
			serviceColours.push(rgba());

			let perHourTicket = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

			//Background Colour
			let colour = rgba();

			//Service
			let localArray = {
				label: $(value).children('td').eq(2).text(),
				backgroundColor: colour,
				borderColor: colour,
				data: perHourTicket,
				fill: false
			};

			if ($('#line-tickets-per-hour').children('tr[service="' + $(value).children('td').eq(2).text() + '"]').length === 0) {
				let serviceTickets = '';

				serviceTickets += '<tr service="' + $(value).children('td').eq(2).text() + '">';
				serviceTickets += '<td>' + $(value).children('td').eq(2).text() + '</td>';
				serviceTickets += '<td value="0">' + perHourTicket[0] + '</td>';
				serviceTickets += '<td value="1">' + perHourTicket[1] + '</td>';
				serviceTickets += '<td value="2">' + perHourTicket[2] + '</td>';
				serviceTickets += '<td value="3">' + perHourTicket[3] + '</td>';
				serviceTickets += '<td value="4">' + perHourTicket[4] + '</td>';
				serviceTickets += '<td value="5">' + perHourTicket[5] + '</td>';
				serviceTickets += '<td value="6">' + perHourTicket[6] + '</td>';
				serviceTickets += '<td value="7">' + perHourTicket[7] + '</td>';
				serviceTickets += '<td value="8">' + perHourTicket[8] + '</td>';
				serviceTickets += '<td value="9">' + perHourTicket[9] + '</td>';
				serviceTickets += '<td value="10">' + perHourTicket[10] + '</td>';
				serviceTickets += '<td value="11">' + perHourTicket[11] + '</td>';
				serviceTickets += '<td value="12">' + perHourTicket[12] + '</td>';
				serviceTickets += '<td value="13">' + perHourTicket[13] + '</td>';
				serviceTickets += '<td value="14">' + perHourTicket[14] + '</td>';
				serviceTickets += '<td value="15">' + perHourTicket[15] + '</td>';
				serviceTickets += '<td value="16">' + perHourTicket[16] + '</td>';
				serviceTickets += '<td value="17">' + perHourTicket[17] + '</td>';
				serviceTickets += '<td value="18">' + perHourTicket[18] + '</td>';
				serviceTickets += '<td value="19">' + perHourTicket[19] + '</td>';
				serviceTickets += '<td value="20">' + perHourTicket[20] + '</td>';
				serviceTickets += '<td value="21">' + perHourTicket[21] + '</td>';
				serviceTickets += '<td value="22">' + perHourTicket[22] + '</td>';
				serviceTickets += '<td value="23">' + perHourTicket[23] + '</td>';
				serviceTickets += '</tr>';

				$('#line-tickets-per-hour').append(serviceTickets);
			}

			serviceLineChart.push(localArray);
		}
		else if (serviceChartLabel.includes($(value).children('td').eq(2).text())) {
			let counter = parseInt($(value).children().eq(7).attr('text').substring(0, 2));

			serviceLineChart.map((arrayValue, index) => {
				arrayValue.label === $(value).children('td').eq(2).text() ? arrayValue.data[counter]++ : '';
			});

			let currentValue = parseInt(document.querySelector('tr[service="' + $(value).children('td').eq(2).text() + '"]').cells.item(counter + 1).innerHTML);
			currentValue++
			if ($(value).children().eq(7).attr('text').includes('PM')) {
				document.querySelector('tr[service="' + $(value).children('td').eq(2).text() + '"]').cells.item(12 + counter + 1).innerHTML = currentValue;
			}
			else
				document.querySelector('tr[service="' + $(value).children('td').eq(2).text() + '"]').cells.item(counter + 1).innerHTML = currentValue;
		}

		if (!segmentChartLabel.includes($(value).children('td').eq(3).text())) {
			segmentChartLabel.push($(value).children('td').eq(3).text());
			segmentChartData.push($('td[text="' + $(value).children('td').eq(3).text() + '"]').length);
			segmentColours.push(rgba());
		}

		if (index === trs.length - 1)
			activeChartes = true;
	});

	//Activate all charts inside this function
	const chartActive = () => {
		const instanceOfBranchChart = new Chart(branchPieChart, {
			type: 'doughnut',
			data: {
				labels: branchChartLabel,
				datasets: [{
					label: '# of Votes',
					data: branchChartData,
					backgroundColor: branchColours,
					borderWidth: 1
				}]
			},
			options: {
				plugins: {
					labels: {
						// render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'
						render: 'percentage',

						// precision for percentage, default is 0
						precision: 2,

						// identifies whether or not labels of value 0 are displayed, default is false
						showZero: true,

						// font size, default is defaultFontSize
						fontSize: 12,

						// font color, can be color array for each data or function for dynamic color, default is defaultFontColor
						fontColor: '#fff',

						// font style, default is defaultFontStyle
						fontStyle: 'normal',

						// font family, default is defaultFontFamily
						fontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",

						// draw label in arc, default is false
						// bar chart ignores this
						arc: false,
					}
				},
				legend: {
					display: true
				},
				title: {
					display: true,
					text: 'Ticket Count Per Branch'
				},
				events: ['click'],
				animation: {
					duration: 0
				},
				responsive: true
			}
		});

		const instanceOfServiceChart = new Chart(servicePieChart, {
			type: 'doughnut',
			data: {
				labels: serviceChartLabel,
				datasets: [{
					label: '# of Votes',
					data: serviceChartData,
					backgroundColor: serviceColours,
					borderWidth: 1
				}]
			},
			options: {
				plugins: {
					labels: {
						// render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'
						render: 'percentage',

						// precision for percentage, default is 0
						precision: 2,

						// identifies whether or not labels of value 0 are displayed, default is false
						showZero: true,

						// font size, default is defaultFontSize
						fontSize: 12,

						// font color, can be color array for each data or function for dynamic color, default is defaultFontColor
						fontColor: '#fff',

						// font style, default is defaultFontStyle
						fontStyle: 'normal',

						// font family, default is defaultFontFamily
						fontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",

						// draw label in arc, default is false
						// bar chart ignores this
						arc: false,
					}
				},
				legend: {
					display: true
				},
				title: {
					display: true,
					text: 'Ticket Count Per Service'
				},
				events: ['click'],
				animation: {
					duration: 0
				},
				responsive: true

			}
		});

		const instanceOfSegmentChart = new Chart(segmentPieChart, {
			type: 'doughnut',
			data: {
				labels: segmentChartLabel,
				datasets: [{
					label: '# of Votes',
					data: segmentChartData,
					backgroundColor: segmentColours,
					borderWidth: 1
				}]
			},
			options: {
				plugins: {
					labels: {
						// render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'
						render: 'percentage',

						// precision for percentage, default is 0
						precision: 2,

						// identifies whether or not labels of value 0 are displayed, default is false
						showZero: true,

						// font size, default is defaultFontSize
						fontSize: 12,

						// font color, can be color array for each data or function for dynamic color, default is defaultFontColor
						fontColor: '#fff',

						// font style, default is defaultFontStyle
						fontStyle: 'normal',

						// font family, default is defaultFontFamily
						fontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",

						// draw label in arc, default is false
						// bar chart ignores this
						arc: false,
					}
				},
				legend: {
					display: true
				},
				title: {
					display: true,
					text: 'Ticket Count Per Segment'
				},
				events: ['click'],
				animation: {
					duration: 0
				},
				responsive: true

			}
		});

		const hours = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23];
		let config = {
			type: 'line',
			data: {
				labels: hours,
				datasets: serviceLineChart
			},
			options: {
				plugins: {
					labels: {
						// render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'
						render: 'value',

						// precision for percentage, default is 0
						precision: 0,

						// identifies whether or not labels of value 0 are displayed, default is false
						showZero: false,

						// font size, default is defaultFontSize
						fontSize: 18,

						// font color, can be color array for each data or function for dynamic color, default is defaultFontColor
						fontColor: '#000',

						// font style, default is defaultFontStyle
						fontStyle: 'normal',

						// font family, default is defaultFontFamily
						fontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",

						// draw label in arc, default is false
						// bar chart ignores this
						arc: false,
					}
				},
				responsive: true,
				title: {
					display: true,
					text: 'Total tickets of service by per hour'
				},
				tooltips: {
					mode: 'index',
					intersect: false,
				},
				hover: {
					mode: 'nearest',
					intersect: true
				},
				scales: {
					xAxes: [{
						display: true,
						scaleLabel: {
							display: true,
							labelString: 'Per Hour'
						}
					}],
					yAxes: [{
						display: true,
						scaleLabel: {
							display: true,
						},
					}]
				},
				animation: {
					duration: 0
				},
			}
		};

		let myLineChart = new Chart(serviceResultChart, config);
	};

	activeChartes ? chartActive() : '';

</script>
