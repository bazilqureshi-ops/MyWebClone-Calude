@using Emse.QMagic.Web.Domain.Viewmodels
@model ReportViewModel

<link href="~/assets/css/report.css" rel="stylesheet" />
<link href="~/assets/css/Chart.min.css" rel="stylesheet" />

<script src="~/assets/js/Chart.min.js"></script>
<script src="~/Scripts/report.js"></script>
<script src="~/Scripts/chartjs-label-plugin.min.js"></script>

<div class="row">
	<div class="col-xs-12 col-xs-offset-0">
		<div class="card">
			<div class="card-header">
				<div class="bussines-info-box left">
					<p>Terminal Based Report</p>
					<p>@Model.CorporateNumber</p>
					<p>
						@{
							string branchList = "";
							for (int i = 0; i < Model.UserBranches.Count; i++)
							{
								if (i == Model.UserBranches.Count - 1) { branchList += $"{Model.UserBranches[i].Name}"; }
								else { branchList += $"{Model.UserBranches[i].Name}, "; }
							}

						}
						@branchList
					</p>
					<p>@Model.StartDate.ToLongDateString() - @Model.FinishDate.ToLongDateString()</p>
				</div>

				<div class="bussines-info-box right">
					<p>@Model.UserName</p>
					<p>@Model.UserRole</p>
					<p>@DateTime.Now.ToLongDateString() / @DateTime.Now.ToLongTimeString()</p>
				</div>
			</div>

			<div class="card-body">

				<form action="/Reports/ExportExcel" method="post" class="row" style="padding-left:10px; padding-right:10px;">

					@for (int i = 0; i < Model.UserBranches.Count(); i++)
					{
						@Html.HiddenFor(x => Model.UserBranches[i].Name)
						@Html.HiddenFor(x => Model.UserBranches[i].Id)
						@Html.HiddenFor(x => Model.UserBranches[i].Checked)
					}

					<!-- Button Container -->
					<div class="row" id="button-area">
						<button type="button" onClick="callPrint(document);" id="printpage" class="btn btn-danger"><i class="fa fa-print"></i> Print Page </button>
						<span>&nbsp;</span>

						<button type="submit" class="btn btn-danger"><i class="fa fa-file-excel-o"></i>  Export to Excel</button>

						<button type="button" id="sign-report" class="btn btn-success" data-toggle="modal" data-target="#sign-report-modal"><i class="fa fa-pencil"></i> Sign Report </button>
					</div>

					<!-- Charts -->
					<div class="chart-container" style="margin-bottom: 2%;">
						<div class="row" id="pie-charts">

							<!-- Branch Pie Chart -->
							<div class="chart">
								<canvas id="branch-chart"></canvas>
							</div>

							<!-- Called Ticket Pie Chart -->
							<div class="chart">
								<canvas id="called-ticket-chart"></canvas>
							</div>

							<!-- Performance Percentage Pie Chart -->
							<div class="chart">
								<canvas id="performance-percentage-chart"></canvas>
							</div>
						</div>

					</div>

					<!-- Item Per Page & Search Input -->
					<select id="item-per-page">
						<option value="10">10</option>
						<option value="25">25</option>
						<option value="50">50</option>
						<option value="100">100</option>
					</select>
					<input type="text" id="search-magic-table" name="search-magic-table" placeholder="type something to search" autocomplete="off" />

					<!-- Item Table -->
					<table id="magic-table" border="1" class="magic-table col-xs-12 col-md-12 col-lg-12" cellspacing="0" width="100%">
						<thead>
							<tr>
								<th>Terminal Number</th>
								<th>Terminal Name</th>
								<th>Called Tickets</th>
								<th>No Show Tickets</th>
								<th>Total Tickets</th>
								<th>Performance Percentage</th>
							</tr>
						</thead>

						<tbody>
							<input type="hidden" name="Data[0]" value="Terminal Number" />
							<input type="hidden" name="Data[0]" value="Terminal Name" />
							<input type="hidden" name="Data[0]" value="Called Tickets" />
							<input type="hidden" name="Data[0]" value="No Show Tickets" />
							<input type="hidden" name="Data[0]" value="Total Tickets" />
							<input type="hidden" name="Data[0]" value="Performance Percentage" />

							@{
								if (Model.ReportProperties.Count > 0)
								{
									for (int i = 0; i < Model.ReportProperties.Count; i++)
									{
										<tr>
											<td text="@Model.ReportProperties[i].TerminalNumber">@Model.ReportProperties[i].TerminalNumber</td>
											<td text="@Model.ReportProperties[i].TerminalName">@Model.ReportProperties[i].TerminalName</td>
											<td text="@Model.ReportProperties[i].CalledTicket">@Model.ReportProperties[i].CalledTicket</td>
											<td text="@Model.ReportProperties[i].NoShowTicket">@Model.ReportProperties[i].NoShowTicket</td>
											<td text="@Model.ReportProperties[i].TotalTicket">@Model.ReportProperties[i].TotalTicket</td>
											<td text="@Model.ReportProperties[i].PerformancePerc">@Model.ReportProperties[i].PerformancePerc</td>

											<input type="hidden" name="Data[@(i + 1)]" value="@Model.ReportProperties[i].TerminalNumber" />
											<input type="hidden" name="Data[@(i + 1)]" value="@Model.ReportProperties[i].TerminalName" />
											<input type="hidden" name="Data[@(i + 1)]" value="@Model.ReportProperties[i].CalledTicket" />
											<input type="hidden" name="Data[@(i + 1)]" value="@Model.ReportProperties[i].NoShowTicket" />
											<input type="hidden" name="Data[@(i + 1)]" value="@Model.ReportProperties[i].TotalTicket" />
											<input type="hidden" name="Data[@(i + 1)]" value="@Model.ReportProperties[i].PerformancePerc" />
										</tr>
									}
								}
							}

						</tbody>
					</table>

					<!-- Page Count and Result Count Info's -->
					<div class="row">
						<div id="page-info-box">
							Total Result: <span id="result-count">{ticket}</span>
							/
							Pages: <span id="page-count">{pages}</span>
						</div>

						<div id="button-container"></div>
					</div>

					<!-- Sign Report Modal -->
					<div class="modal" tabindex="-1" role="dialog" id="sign-report-modal">
						<div class="modal-dialog" role="document">
							<div class="modal-content">
								<div class="modal-header">
									<h3 class="modal-title">Add Signer</h3>

									<button type="button" class="close" data-dismiss="modal" aria-label="Close">
										<span aria-hidden="true">&times;</span>
									</button>
								</div>
								<div class="modal-body">
									<div class="row">
										<input type="text" name="signer-name" class="form-control col-xs-6 col-md-6" placeholder="Replace this text with name" value="" />
										<input type="text" name="signer-surname" class="form-control col-xs-6 col-md-6" placeholder="Replace this text with surname" value="" />
										<input type="text" name="signer-job-title" class="form-control col-xs-6 col-md-12" placeholder="Replace this text with job title (optional)" value="" />

										<button type="button" class="btn btn-primary" onclick="addSigner()">Add Signer</button>
									</div>

									<hr />

									<ul id="signer-list">
									</ul>
								</div>

								<div class="modal-footer">
									<button type="button" class="btn btn-primary" onclick="saveSigners()">Save changes</button>
									<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
								</div>
							</div>
						</div>
					</div>

				</form>

			</div>

		</div>
	</div>
</div>

<script>

	//Get Canvases
	let branchPieChart = document.getElementById('branch-chart'),
		calledTicketPieChart = document.getElementById('called-ticket-chart'),
		performancePercentageChart = document.getElementById('performance-percentage-chart'),

		//Half Donut Min Operation
		percentagePerBranch = [],
		terminalList = [],
		qMagicArray = [],

		trs = $('.magic-table > tbody > tr'),
		activeChartes = false;

	//Fill required datas into arrays
	for (let i = 0; i < trs.length; i++) {
		const row = $(trs[i]);

		if (!terminalList.includes(row.children('td').eq(1).text())) {
			terminalList.push(row.children('td').eq(1).text());

			let data = {
				totalTicket: parseInt(row.children('td').eq(4).text()),
				calledTicket: parseInt(row.children('td').eq(2).text()),
				performancePercentage: parseInt(row.children('td').eq(5).text()),
				label: row.children('td').eq(1).text(),
				colour: rgba()
			};

			qMagicArray.push(data);

		}

		if (i === trs.length - 1)
			activeChartes = true;
	}

	qMagicArray.sort(function (a, b) { return a.totalTicket - b.totalTicket }).reverse();
	for (var i = 0; i < qMagicArray.length; i++) {
		if (qMagicArray.length > i && i < 10) {
			branchChartLabel.push('' + qMagicArray[i].label + ': ' + qMagicArray[i].totalTicket + '');
			branchChartData.push(qMagicArray[i].totalTicket);
			branchColours.push(qMagicArray[i].colour);

			//User's called ticket count
			serviceChartLabel.push('' + qMagicArray[i].label + ': ' + qMagicArray[i].calledTicket + '');
			serviceChartData.push(qMagicArray[i].calledTicket);
			serviceColours.push(qMagicArray[i].colour);

			//User's performance percentage
			segmentChartLabel.push('' + qMagicArray[i].label + ': ' + qMagicArray[i].performancePercentage + '');
			segmentChartData.push(parseFloat(qMagicArray[i].performancePercentage));
			segmentColours.push(qMagicArray[i].colour);
		}
		else if (qMagicArray.length > i && i >= 10) {
			if (i == 10) {
				//Add 'Others' label into chart label array
				branchChartLabel.push('Others');
				branchChartData[10] = 0;

				//Add 'Others' label's colour.
				branchColours.push(rgba());

				//Add 'Others' label into chart label array
				serviceChartLabel.push('Others');
				serviceChartData[10] = 0;

				//Add 'Others' label's colour.
				serviceColours.push(rgba());

				//Add 'Others' label into chart label array
				segmentChartLabel.push('Others');
				segmentChartData[10] = 0;

				//Add 'Others' label's colour.
				segmentColours.push(rgba());
			}

			//Add other users ticket count into common pie data set.
			branchChartData[1] += qMagicArray[i].totalTicket;
			serviceChartData[1] += qMagicArray[i].calledTicket;
			segmentChartData[1] += parseFloat(qMagicArray[i].performancePercentage);
		}
	}

	//Activate all charts inside this function
	const chartActive = () => {
		const instanceOfBranchChart = new Chart(branchPieChart, {
			type: 'doughnut',
			data: {
				labels: branchChartLabel,
				datasets: [{
					label: '# of Votes',
					data: branchChartData,
					backgroundColor: branchColours,
					borderWidth: 1
				}]
			},
			options: {
				plugins: {
					labels: {
						// render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'
						render: 'value',

						// precision for percentage, default is 0
						precision: 0,

						// identifies whether or not labels of value 0 are displayed, default is false
						showZero: true,

						// font size, default is defaultFontSize
						fontSize: 12,

						// font color, can be color array for each data or function for dynamic color, default is defaultFontColor
						fontColor: '#fff',

						// font style, default is defaultFontStyle
						fontStyle: 'normal',

						// font family, default is defaultFontFamily
						fontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",

						// draw label in arc, default is false
						// bar chart ignores this
						arc: false,
					}
				},
				legend: {
					display: true
				},
				title: {
					display: true,
					text: 'Ticket Count Per Terminal'
				},
				events: ['click'],
				animation: {
					duration: 0
				},
				responsive: true
			}
		});

		const instanceOfCalledTicketChart = new Chart(calledTicketPieChart, {
			type: 'doughnut',
			data: {
				labels: serviceChartLabel,
				datasets: [{
					label: '# of Votes',
					data: serviceChartData,
					backgroundColor: serviceColours,
					borderWidth: 1
				}]
			},
			options: {
				plugins: {
					labels: {
						// render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'
						render: 'value',

						// precision for percentage, default is 0
						precision: 0,

						// identifies whether or not labels of value 0 are displayed, default is false
						showZero: true,

						// font size, default is defaultFontSize
						fontSize: 12,

						// font color, can be color array for each data or function for dynamic color, default is defaultFontColor
						fontColor: '#fff',

						// font style, default is defaultFontStyle
						fontStyle: 'normal',

						// font family, default is defaultFontFamily
						fontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",

						// draw label in arc, default is false
						// bar chart ignores this
						arc: false,
					}
				},
				legend: {
					display: true
				},
				title: {
					display: true,
					text: 'Called Ticket Count Per Terminal'
				},
				events: ['click'],
				animation: {
					duration: 0
				},
				responsive: true
			}
		});

		const instanceOfPerformanceChart = new Chart(performancePercentageChart, {
			type: 'doughnut',
			data: {
				labels: segmentChartLabel,
				datasets: [{
					label: '# of Votes',
					data: segmentChartData,
					backgroundColor: segmentColours,
					borderWidth: 1
				}]
			},
			options: {
				plugins: {
					labels: {
						// render 'label', 'value', 'percentage', 'image' or custom function, default is 'percentage'
						render: 'percentage',

						// precision for percentage, default is 0
						precision: 0,

						// identifies whether or not labels of value 0 are displayed, default is false
						showZero: true,

						// font size, default is defaultFontSize
						fontSize: 12,

						// font color, can be color array for each data or function for dynamic color, default is defaultFontColor
						fontColor: '#fff',

						// font style, default is defaultFontStyle
						fontStyle: 'normal',

						// font family, default is defaultFontFamily
						fontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",

						// draw label in arc, default is false
						// bar chart ignores this
						arc: false,
					}
				},
				legend: {
					display: true
				},
				title: {
					display: true,
					text: 'Performance Percentages by Terminal'
				},
				events: ['click'],
				animation: {
					duration: 0
				},
				responsive: true
			}
		});

	};

	activeChartes ? chartActive() : '';
</script>